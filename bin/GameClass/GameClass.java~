package GameClass;

/**
 * @author  Thomas Roberts <thomas.jack.roberts@gmail.com>
 * @version 0.0
 */

import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Random;
import javax.imageio.ImageIO;
import javax.swing.JFrame;

/**
 *
 * @author User
 */
public class GameClass extends JFrame implements MouseListener, KeyListener{
	
	int fps = 40;
	int windowWidth = 800;
	int windowHeight = 600;
    int room = 1;
    double a = 0.3;
    double x = 100;
    double y = 100;
    double vx;
    double vy;
    boolean isRunning = false;
    boolean[] keystates = new boolean[]{false,false,false,false};
    BufferedImage backBuffer;
	Insets insets;
    
    BufferedImage Logo = LoadImage("src/Images/PClogo.png");
    BufferedImage background = LoadImage("src/Images/background.png");
    BufferedImage box = LoadImage("src/Images/box.png");
    
    static Random randomGenerator = new Random();
    
	public static void main(String[] args){
		GameClass game = new GameClass();
		game.run();
		System.exit(0);
	}

    public GameClass() {
        this.isRunning = true;
    }
	
	public void run(){
		initialize();
		
		while(isRunning){
            
			update();
			
            if (room == 0){
                drawLevel();
            }else if (room == 1){
                drawMenu();
            }else if (room == 2){
                drawSettings1();
            }
            
            long time = System.currentTimeMillis();
            time = (1000 / fps) - (System.currentTimeMillis() - time);
			if (time > 0){
				try{
					Thread.sleep(time);
				}catch(Exception e){}
			}
		}
		setVisible(false);
	}

	void initialize(){
		setTitle("PC");
		setSize(windowWidth, windowHeight);
		setResizable(false);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setVisible(true);

		insets = getInsets();
		setSize(insets.left + windowWidth + insets.right, insets.top + windowHeight + insets.bottom);

		backBuffer = new BufferedImage(windowWidth, windowHeight, BufferedImage.TYPE_INT_RGB);
		
		addMouseListener(this);
        addKeyListener(this);
	}
    
    void update(){
        if (room == 0){
        if (keystates[0]==true){vy=-4;}
		if (keystates[1]==true){}
		if (keystates[2]==true){vx-=1.2;}
		if (keystates[3]==true){vx+=1.2;}
		if (keystates[2]==true && keystates[3]==true){vx=vx/1.1;}
		if (keystates[2]==false && keystates[3]==false){vx=vx/1.1;}
        
        
		//double checkforx = x+vx;
		//double checkfory = y+vy;
		//if (!Methods.checkForMapCollisions(checkforx, checkfory)) {
			x+=vx;
			y+=vy;
		//} else {
            // This will make the gameplay better.
			// Or you could do vx=-vx vy=-vy to "bounce" off things.
		//}
		
		//if (y<599) {
			vy+=a;
		//}else{
		//	vy=0;
		//}
		
		vx = Math.max(Math.min(vx, 3), -3);
		vy = Math.max(Math.min(vy, 7), -7);
		
		//updateFPS(); // update FPS Counter
     }
	}

	void drawMenu(){
		Graphics g = getGraphics();
		Graphics bbg = backBuffer.getGraphics();
		bbg.setColor(Color.WHITE);
		bbg.fillRect(0, 0, windowWidth, windowHeight);
        bbg.drawImage(background, 1, 1, 800, 600, this);
        bbg.drawImage(Logo, 181, 100, 437, 135, this);
        bbg.setFont(new Font("sansserif", Font.PLAIN, 32));
        bbg.setColor(Color.BLACK);
        DrawMenuBox(100,400,"Single Player",bbg);
        DrawMenuBox(450,400,"Multiplayer",bbg);
        DrawMenuBox(100,500,"Settings",bbg);
        DrawMenuBox(450,500,"Quit",bbg);
        g.drawImage(backBuffer, insets.left, insets.top, this);
	}
    
    void drawSettings1(){
        Graphics g = getGraphics();
		Graphics bbg = backBuffer.getGraphics();
		bbg.setColor(Color.WHITE);
		bbg.fillRect(0, 0, windowWidth, windowHeight);
		bbg.drawImage(background, 1, 1, 800, 600, this);
        bbg.drawImage(Logo, 181, 100, 437, 135, this);
        bbg.setFont(new Font("sansserif", Font.PLAIN, 32));
        bbg.setColor(Color.BLACK);
        DrawMenuBox(100,400,"window size",bbg);
        DrawMenuBox(450,400,"volume = BUILDME",bbg);
        DrawMenuBox(100,500,"Quality = BUILDME",bbg);
        DrawMenuBox(450,500,"back",bbg);
        g.drawImage(backBuffer, insets.left, insets.top, this);
    }
    
    void DrawMenuBox(int x, int y, String text, Graphics d){
        d.drawImage(box, x, y, 250, 60, this);
        d.drawString(text, x+30, y+40);
    }
    
    void click(int x, int y){
        if (room == 1){
            if (x > 100 && y > 400 && x < 349 && y < 459){room = 0;}
            if (x > 450 && y > 400 && x < 699 && y < 459){}
            if (x > 100 && y > 500 && x < 349 && y < 559){room = 2;}
            if (x > 450 && y > 500 && x < 699 && y < 559){isRunning = false;}
        }else if (room == 2){
            if (x > 100 && y > 400 && x < 349 && y < 459){setSize(1000, 600); windowWidth = 1000; windowHeight = 600;}
            if (x > 450 && y > 400 && x < 699 && y < 459){System.out.println("NOT BUILT");}
            if (x > 100 && y > 500 && x < 349 && y < 559){System.out.println("NOT BUILT");}
            if (x > 450 && y > 500 && x < 699 && y < 559){room = 1;}
        }
    }
    
    void drawLevel(){
		Graphics g = getGraphics();
		Graphics bbg = backBuffer.getGraphics();
		bbg.setColor(Color.WHITE);
		bbg.fillRect(0, 0, windowWidth, windowHeight);
		bbg.setColor(Color.BLACK);
        int drawx = (int) Math.ceil(x);
        int drawy = (int) Math.ceil(y);
        bbg.drawOval(drawx, drawy, 20, 20);
		g.drawImage(backBuffer, insets.left, insets.top, this);
	}

    public BufferedImage LoadImage(String path){
        BufferedImage tempimage = null ;
        
        try {
            tempimage = ImageIO.read(new File(path));
        } catch (IOException ex) {
            System.out.println("error");
        }
        
        return tempimage;
    }
    
    @Override
    public void keyPressed(KeyEvent e) {
		int key = e.getKeyCode();
		if (key == KeyEvent.VK_UP){keystates[0] = true;}
		if (key == KeyEvent.VK_DOWN){keystates[1] = true;}
		if (key == KeyEvent.VK_LEFT){keystates[2] = true;}
		if (key == KeyEvent.VK_RIGHT){keystates[3] = true;}
	}
    
    @Override
	public void keyReleased(KeyEvent e) {
		int key = e.getKeyCode();
		if (key == KeyEvent.VK_UP) {keystates[0] = false;}
		if (key == KeyEvent.VK_DOWN) {keystates[1] = false;}
		if (key == KeyEvent.VK_LEFT) {keystates[2] = false;}
		if (key == KeyEvent.VK_RIGHT) {keystates[3] = false;}
	}
    
    @Override
    public void mouseClicked(MouseEvent me) {
        int mX = me.getX()-3;
        int mY = me.getY()-23;
        click(mX,mY);
    }

    @Override
    public void keyTyped(KeyEvent ke) {}
    @Override
    public void mousePressed(MouseEvent me) {}
    @Override
    public void mouseReleased(MouseEvent me) {}
    @Override
    public void mouseEntered(MouseEvent me) {}
    @Override
    public void mouseExited(MouseEvent me) {}
}